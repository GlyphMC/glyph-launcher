// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
	async login(): Promise<Result<Profile, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("login") };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async cancelLogin(): Promise<Result<null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("cancel_login") };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async setOnboardingComplete(): Promise<Result<null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("set_onboarding_complete") };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async switchAccount(id: string): Promise<Result<null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("switch_account", { id }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async deleteAccount(id: string): Promise<Result<null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("delete_account", { id }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async getActiveAccount(): Promise<Result<Account | null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("get_active_account") };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async getMinecraftProfiles(): Promise<Result<Profile[], string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("get_minecraft_profiles") };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async downloadJava(): Promise<Result<[string, string, string], string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("download_java") };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async extractJava(paths: [string, string, string]): Promise<Result<[string, string, string], string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("extract_java", { paths }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async testJava(paths: [string, string, string]): Promise<Result<[JavaTestInfo, JavaTestInfo, JavaTestInfo], string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("test_java", { paths }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async saveJavaToConfig(paths: [string, string, string], automatic: boolean): Promise<Result<null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("save_java_to_config", { paths, automatic }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async getJavaFromConfig(): Promise<Result<JavaConfig, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("get_java_from_config") };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async getInstances(): Promise<Result<Instance[], string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("get_instances") };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async getInstance(slug: string): Promise<Result<Instance, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("get_instance", { slug }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async createInstance(instance: Instance): Promise<Result<null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("create_instance", { instance }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async updateInstance(instance: Instance): Promise<Result<null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("update_instance", { instance }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async deleteInstance(slug: string): Promise<Result<null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("delete_instance", { slug }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async launchInstance(slug: string): Promise<Result<null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("launch_instance", { slug }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async getVersions(): Promise<Result<Version[], string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("get_versions") };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async setDiscordActivity(details: string, status: string): Promise<Result<null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("set_discord_activity", { details, status }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async toggleDiscordRpc(enabled: boolean): Promise<Result<null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("toggle_discord_rpc", { enabled }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async getLauncherSettings(): Promise<Result<LauncherSettings, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("get_launcher_settings") };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async saveLauncherSettings(settings: LauncherSettings): Promise<Result<null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("save_launcher_settings", { settings }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async getAvatar(uuid: string): Promise<Result<string, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("get_avatar", { uuid }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async getScreenshots(slug: string): Promise<Result<Screenshot[], string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("get_screenshots", { slug }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async openScreenshotsDir(slug: string): Promise<Result<null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("open_screenshots_dir", { slug }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async watchScreenshotsForInstance(slug: string): Promise<Result<null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("watch_screenshots_for_instance", { slug }) };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	},
	async stopWatchingScreenshots(): Promise<Result<null, string>> {
		try {
			return { status: "ok", data: await TAURI_INVOKE("stop_watching_screenshots") };
		} catch (e) {
			if (e instanceof Error) throw e;
			else return { status: "error", error: e as any };
		}
	}
};

/** user-defined events **/

export const events = __makeEvents__<{
	assetProgressEvent: AssetProgressEvent;
	assetsDownloadFinishedEvent: AssetsDownloadFinishedEvent;
	assetsDownloadStartedEvent: AssetsDownloadStartedEvent;
	instanceListUpdatedEvent: InstanceListUpdatedEvent;
	instanceLogEvent: InstanceLogEvent;
	instanceStartedEvent: InstanceStartedEvent;
	instanceStoppedEvent: InstanceStoppedEvent;
	javaDownloadFinishedEvent: JavaDownloadFinishedEvent;
	javaDownloadProgressEvent: JavaDownloadProgressEvent;
	javaDownloadStartedEvent: JavaDownloadStartedEvent;
	javaExtractFinishedEvent: JavaExtractFinishedEvent;
	javaExtractProgressEvent: JavaExtractProgressEvent;
	javaExtractStartedEvent: JavaExtractStartedEvent;
	loginDetailsEvent: LoginDetailsEvent;
	screenshotEvent: ScreenshotEvent;
}>({
	assetProgressEvent: "asset-progress-event",
	assetsDownloadFinishedEvent: "assets-download-finished-event",
	assetsDownloadStartedEvent: "assets-download-started-event",
	instanceListUpdatedEvent: "instance-list-updated-event",
	instanceLogEvent: "instance-log-event",
	instanceStartedEvent: "instance-started-event",
	instanceStoppedEvent: "instance-stopped-event",
	javaDownloadFinishedEvent: "java-download-finished-event",
	javaDownloadProgressEvent: "java-download-progress-event",
	javaDownloadStartedEvent: "java-download-started-event",
	javaExtractFinishedEvent: "java-extract-finished-event",
	javaExtractProgressEvent: "java-extract-progress-event",
	javaExtractStartedEvent: "java-extract-started-event",
	loginDetailsEvent: "login-details-event",
	screenshotEvent: "screenshot-event"
});

/** user-defined constants **/

/** user-defined types **/

export type Account = { active: boolean; expiry: string; accessToken: string; refreshToken: string; profile: Profile };
export type AssetKind = "Assets" | "Libraries" | "version-jar";
export type AssetProgressEvent = { kind: AssetKind; percentage: number };
export type AssetsDownloadFinishedEvent = string;
export type AssetsDownloadStartedEvent = string;
export type Cape = { id: string; state: string; url: string; alias: string };
export type Game = { version: string; modloader: Modloader; url: string };
export type Instance = { slug: string; name: string; game: Game; java: Java; settings: Settings };
export type InstanceListUpdatedEvent = string;
export type InstanceLogEvent = { slug: string; line: string };
export type InstanceStartedEvent = { slug: string; message: string };
export type InstanceStoppedEvent = { slug: string; message: string };
export type Java = { path: string; args: string[]; version: number };
export type JavaConfig = { java8Path: string; java17Path: string; java21Path: string };
export type JavaDownloadFinishedEvent = { paths: string[] };
export type JavaDownloadProgressEvent = { version: number; percentage: number };
export type JavaDownloadStartedEvent = string;
export type JavaExtractFinishedEvent = { paths: string[] };
export type JavaExtractProgressEvent = { version: number; percentage: number };
export type JavaExtractStartedEvent = string;
export type JavaTestInfo = { valid: boolean; version: number; vendor: string; expectedVersion: number; versionMismatch: boolean };
export type LauncherSettings = { richPresence: boolean; useDiscreteGpu: boolean };
export type LoginDetailsEvent = { code: string; uri: string };
export type Modloader = { loader: string; version: string | null };
export type Profile = { id: string; name: string; skins: Skin[]; capes: Cape[] };
export type Screenshot = { path: string; name: string; data: string };
export type ScreenshotEvent = string;
export type Settings = {
	hasLaunched: boolean;
	richPresence: boolean;
	windowWidth: number;
	windowHeight: number;
	maximized: boolean;
	timePlayed?: number;
	lastPlayed?: string;
};
export type Skin = { id: string; state: string; url: string; variant: string };
export type Version = { id: string; type: string; url: string; time: string; releaseTime: string; sha1: string; complianceLevel: number };

/** tauri-specta globals **/

import { invoke as TAURI_INVOKE, Channel as TAURI_CHANNEL } from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (cb: TAURI_API_EVENT.EventCallback<T>) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (cb: TAURI_API_EVENT.EventCallback<T>) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit> : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> = { status: "ok"; data: T } | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(mappings: Record<keyof T, string>) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg)
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					}
				});
			}
		}
	);
}
